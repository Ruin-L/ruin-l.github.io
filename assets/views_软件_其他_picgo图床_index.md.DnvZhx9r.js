import{_ as r,C as i,c as n,o as s,aB as p,G as a}from"./chunks/framework.CuZ66bTI.js";const b=JSON.parse('{"title":"picgo 图床","description":"","frontmatter":{},"headers":[],"relativePath":"views/软件/其他/picgo图床/index.md","filePath":"views/软件/其他/picgo图床/index.md","lastUpdated":1758093755000}'),c={name:"views/软件/其他/picgo图床/index.md"};function g(m,e,l,h,d,u){const t=i("NolebaseGitContributors"),o=i("NolebaseGitChangelog");return s(),n("div",null,[e[0]||(e[0]=p('<h1 id="picgo-图床" tabindex="-1">picgo 图床 <a class="header-anchor" href="#picgo-图床" aria-label="Permalink to &quot;picgo 图床&quot;">​</a></h1><p>picgo 图床一种能够将图片上传到各大云服务器的软件工具，他的使用场景主要是用于个人网站图片的存储。如使用 vitepress 搭建个人网站并部署到 github page 的情况，由于单个 github page 网页的容量限制为 100mb，此时如果将文档中的所有图片都放到项目文件夹内的话，可能会超出限制，并且影响构建和打包速度，此时 picgo 不失为一种免费且效率高的解决方案。</p><h2 id="使用方法" tabindex="-1">使用方法 <a class="header-anchor" href="#使用方法" aria-label="Permalink to &quot;使用方法&quot;">​</a></h2><ol><li>picgo 页面如下所示，以 github 仓库为例，我们可以首先在 github 上创建一个专门用于存放图片的仓库，每个仓库大概可以存放 5gb 的图片。</li></ol><p><img src="https://jiashu.jsdmirror.com/gh/Ruin-L/image@main/img/20250728142012360.png" alt="img"></p><p>2.之后我们需要创建一个 classic token， 用于让 picgo 去访问我们的 github 仓库。</p><p><img src="https://jiashu.jsdmirror.com/gh/Ruin-L/image@main/img/20250728142229575.png" alt=""></p><blockquote><p>⚠️ 注意：创建 token 的时候需要勾选 repo 选项用于授予 token 访问我们仓库的权限</p></blockquote><p><img src="https://jiashu.jsdmirror.com/gh/Ruin-L/image@main/img/20250728142416400.png" alt=""></p><p>3.之后将 token 以及仓库的名字、分支等内容填写进去。出于提高我们网站图片的访问速度与稳定性，可以设置自定义域名，使用免费的 jsdelivr cdn，格式参照 <code>https://jiashu.jsdmirror.com/gh/Ruin-L/image@main</code></p><p><img src="https://jiashu.jsdmirror.com/gh/Ruin-L/image@main/img/20250728141513074.png" alt=""></p><h2 id="下载链接" tabindex="-1">下载链接 <a class="header-anchor" href="#下载链接" aria-label="Permalink to &quot;下载链接&quot;">​</a></h2><p><a href="https://cloud.189.cn/t/eeiMjy3UVv6v%EF%BC%88%E8%AE%BF%E9%97%AE%E7%A0%81%EF%BC%9A2vfm%EF%BC%89" target="_blank" rel="noreferrer">win-x64</a></p><p><a href="https://cloud.189.cn/t/i6ziMvvUVb2e%EF%BC%88%E8%AE%BF%E9%97%AE%E7%A0%81%EF%BC%9Abv0y%EF%BC%89" target="_blank" rel="noreferrer">mac-arm</a></p>',14)),a(t),a(o)])}const E=r(c,[["render",g]]);export{b as __pageData,E as default};
