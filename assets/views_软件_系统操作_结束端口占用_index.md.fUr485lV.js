import{_ as l,C as s,c as t,o,aB as r,G as e}from"./chunks/framework.CuZ66bTI.js";const v=JSON.parse('{"title":"结束端口占用","description":"","frontmatter":{},"headers":[],"relativePath":"views/软件/系统操作/结束端口占用/index.md","filePath":"views/软件/系统操作/结束端口占用/index.md","lastUpdated":1754395410000}'),d={name:"views/软件/系统操作/结束端口占用/index.md"};function p(c,a,h,u,b,g){const n=s("NolebaseGitContributors"),i=s("NolebaseGitChangelog");return o(),t("div",null,[a[0]||(a[0]=r(`<h1 id="结束端口占用" tabindex="-1">结束端口占用 <a class="header-anchor" href="#结束端口占用" aria-label="Permalink to &quot;结束端口占用&quot;">​</a></h1><p>有时候我们在开发的时候可能会遇到终端已经关闭了，但是端口还是被占用的状态，这会可能会导致就算重启后端服务，这时候访问到的还是老的服务。</p><h2 id="如何解决-windows" tabindex="-1">如何解决（windows）？ <a class="header-anchor" href="#如何解决-windows" aria-label="Permalink to &quot;如何解决（windows）？&quot;">​</a></h2><p>在 Windows 系统中，查看端口占用情况并结束占用进程是网络管理和故障排查的常见操作。以下是具体步骤及方法：</p><hr><h3 id="一、查看端口占用情况" tabindex="-1"><strong>一、查看端口占用情况</strong> <a class="header-anchor" href="#一、查看端口占用情况" aria-label="Permalink to &quot;**一、查看端口占用情况**&quot;">​</a></h3><h4 id="_1-使用命令提示符-cmd" tabindex="-1"><strong>1. 使用命令提示符（CMD）</strong> <a class="header-anchor" href="#_1-使用命令提示符-cmd" aria-label="Permalink to &quot;**1. 使用命令提示符（CMD）**&quot;">​</a></h4><ul><li><p><strong>查看所有端口占用</strong> 打开命令提示符（以管理员身份运行），输入以下命令：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>netstat -ano</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>该命令会列出所有活动的网络连接及对应的进程 ID（PID），最后一列为占用端口的进程标识符。</p></li><li><p><strong>查看特定端口占用</strong> 若需检查某个端口（如 8080）是否被占用，可使用过滤命令：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>netstat -ano | findstr :8080</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>输出结果会显示占用该端口的进程 PID。</p></li></ul><h4 id="_2-使用资源监视器" tabindex="-1"><strong>2. 使用资源监视器</strong> <a class="header-anchor" href="#_2-使用资源监视器" aria-label="Permalink to &quot;**2. 使用资源监视器**&quot;">​</a></h4><ul><li>打开任务管理器（<code>Ctrl + Shift + Esc</code>），切换到“性能”选项卡，点击“打开资源监视器”。</li><li>在“网络”选项卡中，查看“监听端口”部分，可直观看到端口、进程名称及 PID。</li></ul><h4 id="_3-使用第三方工具" tabindex="-1"><strong>3. 使用第三方工具</strong> <a class="header-anchor" href="#_3-使用第三方工具" aria-label="Permalink to &quot;**3. 使用第三方工具**&quot;">​</a></h4><ul><li><strong>TCPView</strong>（微软官方工具）：实时监控 TCP/UDP 连接，支持直接右键终止进程。</li><li><strong>CurrPorts</strong>：提供更详细的端口信息，适合高级用户。</li></ul><hr><h3 id="二、结束占用端口的进程" tabindex="-1"><strong>二、结束占用端口的进程</strong> <a class="header-anchor" href="#二、结束占用端口的进程" aria-label="Permalink to &quot;**二、结束占用端口的进程**&quot;">​</a></h3><h4 id="_1-通过命令提示符终止进程" tabindex="-1"><strong>1. 通过命令提示符终止进程</strong> <a class="header-anchor" href="#_1-通过命令提示符终止进程" aria-label="Permalink to &quot;**1. 通过命令提示符终止进程**&quot;">​</a></h4><ul><li><p><strong>强制终止进程</strong> 根据 <code>netstat</code>获取的 PID，执行以下命令：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>taskkill /PID &lt;PID&gt; /F</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>例如终止 PID 为 1234 的进程：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>taskkill /PID 1234 /F</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>/F</code>参数表示强制终止。</p></li><li><p><strong>按进程名称终止</strong> 若已知进程名称（如 <code>java.exe</code>），可用：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>taskkill /IM java.exe /F</span></span>
<span class="line"><span>\`\`\`。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><h4 id="_2-通过任务管理器终止" tabindex="-1"><strong>2. 通过任务管理器终止</strong> <a class="header-anchor" href="#_2-通过任务管理器终止" aria-label="Permalink to &quot;**2. 通过任务管理器终止**&quot;">​</a></h4><ul><li>在任务管理器的“详细信息”选项卡中，找到对应 PID 的进程，右键选择“结束任务”。</li></ul><hr><h3 id="三、注意事项" tabindex="-1"><strong>三、注意事项</strong> <a class="header-anchor" href="#三、注意事项" aria-label="Permalink to &quot;**三、注意事项**&quot;">​</a></h3><ol><li><strong>权限问题</strong><ul><li>部分系统进程需管理员权限才能终止，建议以管理员身份运行 CMD 或 PowerShell。</li></ul></li><li><strong>谨慎操作</strong><ul><li>避免终止系统关键进程（如 <code>svchost.exe</code>），可能导致系统不稳定。</li></ul></li><li><strong>端口复用问题</strong><ul><li>终止进程后，若端口仍被占用，可能是缓存问题，建议重启计算机或重新启动相关服务。</li></ul></li><li><strong>防火墙与安全</strong><ul><li>检查是否有未知程序占用敏感端口（如 80、443），防止安全风险。</li></ul></li></ol><hr><h3 id="四、常见问题示例" tabindex="-1"><strong>四、常见问题示例</strong> <a class="header-anchor" href="#四、常见问题示例" aria-label="Permalink to &quot;**四、常见问题示例**&quot;">​</a></h3><ul><li><strong>场景</strong>：运行 Python Flask 应用时提示端口 8080 被占用。 <strong>解决步骤</strong>： <ol><li>执行** **<code>netstat -ano | findstr :8080</code>，获取 PID（如 1234）。</li><li>执行** **<code>taskkill /PID 1234 /F</code> 终止进程。</li><li>若仍无法启动，检查代码中是否有多个实例运行。</li></ol></li></ul><hr><p>通过上述方法，可高效排查和解决 Windows 系统中的端口占用问题。如需进一步分析网络状态，可结合 <code>ipconfig</code>、<code>tracert</code>等命令。</p><p>在基于 ARM 架构的 Mac 系统（如 M1/M2 芯片）中，解决端口占用问题与 Intel 架构的 Mac 操作方法一致，但需注意部分命令的参数优化和系统特性。以下是具体步骤：</p><hr><h2 id="如何解决-mac" tabindex="-1">如何解决（mac）？ <a class="header-anchor" href="#如何解决-mac" aria-label="Permalink to &quot;如何解决（mac）？&quot;">​</a></h2><h3 id="一、查看端口占用情况-1" tabindex="-1"><strong>一、查看端口占用情况</strong> <a class="header-anchor" href="#一、查看端口占用情况-1" aria-label="Permalink to &quot;**一、查看端口占用情况**&quot;">​</a></h3><h4 id="_1-使用终端命令" tabindex="-1"><strong>1. 使用终端命令</strong> <a class="header-anchor" href="#_1-使用终端命令" aria-label="Permalink to &quot;**1. 使用终端命令**&quot;">​</a></h4><ul><li><p><strong>基础命令</strong> 通过 <code>lsof</code>（List Open Files）查看端口占用，适用于所有 macOS 版本：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo lsof -i :&lt;端口号&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>例如查看 8080 端口：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo lsof -i :8080</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>输出结果包含进程名称、PID、用户和状态。</p></li><li><p><strong>过滤监听状态</strong> 若需仅显示正在监听的端口，可添加参数：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo lsof -iTCP:&lt;端口号&gt; -sTCP:LISTEN</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这能快速定位冲突进程。</p></li><li><p><strong>查看所有端口占用</strong> 列出所有活动端口及对应进程：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo lsof -i -P -n</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>-P</code>忽略端口号映射，<code>-n</code>显示 IP 地址而非域名。</p></li></ul><h4 id="_2-使用-netstat命令" tabindex="-1"><strong>2. 使用 <code>netstat</code>命令</strong> <a class="header-anchor" href="#_2-使用-netstat命令" aria-label="Permalink to &quot;**2. 使用 \`netstat\`命令**&quot;">​</a></h4><p>虽然 <code>lsof</code>更常用，但 <code>netstat</code>可补充信息：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>netstat -anp tcp | grep LISTEN</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>显示所有 TCP 监听端口及关联进程。</p><h4 id="_3-图形化工具" tabindex="-1"><strong>3. 图形化工具</strong> <a class="header-anchor" href="#_3-图形化工具" aria-label="Permalink to &quot;**3. 图形化工具**&quot;">​</a></h4><ul><li><strong>活动监视器（Activity Monitor）</strong> 打开 <code>应用程序 &gt; 实用工具 &gt; 活动监视器</code>，在“网络”标签页中筛选端口占用。</li><li><strong>终端增强工具</strong> 如 <code>iTerm2</code>或 <code>Hyper</code>，支持分屏和快捷操作。</li></ul><hr><h3 id="二、终止占用端口的进程" tabindex="-1"><strong>二、终止占用端口的进程</strong> <a class="header-anchor" href="#二、终止占用端口的进程" aria-label="Permalink to &quot;**二、终止占用端口的进程**&quot;">​</a></h3><h4 id="_1-通过终端强制终止" tabindex="-1"><strong>1. 通过终端强制终止</strong> <a class="header-anchor" href="#_1-通过终端强制终止" aria-label="Permalink to &quot;**1. 通过终端强制终止**&quot;">​</a></h4><ul><li><p><strong>获取 PID 后终止</strong> 根据 <code>lsof</code>或 <code>netstat</code>获取 PID，执行：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kill -9 &lt;PID&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>-9</code>表示强制终止（SIGKILL 信号）。</p></li><li><p><strong>通过进程名终止</strong> 若已知进程名称（如 <code>node</code>），可直接终止所有相关进程：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>killall -9 &lt;进程名&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>例如终止所有 Node.js 进程：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>killall -9 node</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h4 id="_2-使用活动监视器终止" tabindex="-1"><strong>2. 使用活动监视器终止</strong> <a class="header-anchor" href="#_2-使用活动监视器终止" aria-label="Permalink to &quot;**2. 使用活动监视器终止**&quot;">​</a></h4><ol><li>打开活动监视器，搜索目标进程。</li><li>选中进程后点击左上角 <code>×</code>按钮，选择“强制退出”。</li></ol><hr><h3 id="三、arm-架构的特殊注意事项" tabindex="-1"><strong>三、ARM 架构的特殊注意事项</strong> <a class="header-anchor" href="#三、arm-架构的特殊注意事项" aria-label="Permalink to &quot;**三、ARM 架构的特殊注意事项**&quot;">​</a></h3><ol><li><strong>Rosetta 兼容模式</strong> 若运行 x86 应用，可能通过 Rosetta 转译，需确认进程是否为原生 ARM 版本。可通过 <code>活动监视器 &gt; 查看 &gt; 所有进程</code>，检查 <code>Kind</code>列是否为 <code>Intel</code>或 <code>ARM</code>。</li><li><strong>系统服务权限</strong> 部分端口（如 80、443）可能被系统服务占用，需使用 <code>sudo</code>权限操作：<div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo kill -9 &lt;PID&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><strong>端口范围限制</strong> macOS 默认用户进程可绑定 1024 以上端口，若需绑定低端口（如 80），需使用 <code>sudo</code>启动服务。</li></ol><hr><h3 id="四、常见问题解决示例" tabindex="-1"><strong>四、常见问题解决示例</strong> <a class="header-anchor" href="#四、常见问题解决示例" aria-label="Permalink to &quot;**四、常见问题解决示例**&quot;">​</a></h3><ul><li><strong>场景 1：运行 Python 服务时提示端口冲突</strong><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 查看8000端口占用</span></span>
<span class="line"><span>sudo lsof -i :8000</span></span>
<span class="line"><span># 终止PID为1234的进程</span></span>
<span class="line"><span>kill -9 1234</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><strong>场景 2：Node.js 应用无法启动</strong><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 查找Node进程</span></span>
<span class="line"><span>ps -ax | grep node</span></span>
<span class="line"><span># 强制终止</span></span>
<span class="line"><span>killall -9 node</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><hr><h3 id="五、预防措施" tabindex="-1"><strong>五、预防措施</strong> <a class="header-anchor" href="#五、预防措施" aria-label="Permalink to &quot;**五、预防措施**&quot;">​</a></h3><ol><li><strong>端口动态分配</strong> 开发时使用随机端口（如 <code>0</code>），由系统自动分配：<div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>python3 -m http.server 0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><strong>配置文件管理</strong> 在应用配置中明确指定端口，避免默认端口冲突。</li><li><strong>定期清理残留进程</strong> 使用 <code>活动监视器</code>或 <code>lsof</code>检查僵尸进程。</li></ol><hr><p>通过上述方法，可高效管理 ARM 架构 Mac 的端口占用问题。若需进一步分析网络状态，可结合 <code>iftop</code>（流量监控）或 <code>nmap</code>（端口扫描）工具。</p>`,55)),e(n),e(i)])}const k=l(d,[["render",p]]);export{v as __pageData,k as default};
