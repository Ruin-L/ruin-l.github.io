import{_ as r,C as t,c as i,o as p,aB as n,G as a}from"./chunks/framework.CuZ66bTI.js";const g=JSON.parse('{"title":"VitePress 为路由切换增加动画效果","description":"","frontmatter":{},"headers":[],"relativePath":"views/开发/前端/vitepress路由动画效果/index.md","filePath":"views/开发/前端/vitepress路由动画效果/index.md","lastUpdated":1753789963000}'),d={name:"views/开发/前端/vitepress路由动画效果/index.md"};function l(c,e,h,u,v,m){const s=t("NolebaseGitContributors"),o=t("NolebaseGitChangelog");return p(),i("div",null,[e[0]||(e[0]=n('<h1 id="vitepress-为路由切换增加动画效果" tabindex="-1">VitePress 为路由切换增加动画效果 <a class="header-anchor" href="#vitepress-为路由切换增加动画效果" aria-label="Permalink to &quot;VitePress 为路由切换增加动画效果&quot;">​</a></h1><h2 id="简单介绍" tabindex="-1">简单介绍 <a class="header-anchor" href="#简单介绍" aria-label="Permalink to &quot;简单介绍&quot;">​</a></h2><p>在 vitepress 中，文档的切换非常迅速，以至于我们如果注意力不集中很容易没有发现文档切换了，聪明的我们还以为点击链接没有效果或者卡住了</p><p>为了解决这个问题，我们需要在路由切换时增加一些贼拉漂亮的动画效果，让文档切换更流畅，更自然</p><hr><p>来看看官方文档怎么让路由切换有动画效果吧：</p><p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/7d0c7981ab4147b7828639fbffd4171a~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTW95dVdjYw==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1753772431&amp;x-signature=CwX7yUOJZNrUMn1Rsw%2FJKvWY%2FUg%3D" alt="为路由切换增加动画效果-1.webp"></p><p><strong>现在它真的要到来了！</strong></p><hr><p>其实要实现这个效果很简单，不知道官网为啥鸽了 我是基于官网介绍的 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fvitepress.dev%2Fzh%2Fguide%2Fextending-default-theme%23layout-slots" title="https://vitepress.dev/zh/guide/extending-default-theme#layout-slots" target="_blank" rel="noreferrer">布局插槽</a> 实现的</p><p><strong>实现的关键点</strong> ：</p><ol><li>使用布局插槽来让显示文档的区域插入一个遮罩层</li><li>给这个遮罩层添加一个可以由 JS 控制的动画效果</li><li>监听路由切换，在路由切换时，控制遮罩层的动画效果</li></ol><h2 id="效果展示" tabindex="-1">效果展示 <a class="header-anchor" href="#效果展示" aria-label="Permalink to &quot;效果展示&quot;">​</a></h2><p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/d9317fff06c644c9acd73ccfc638c6cb~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAgTW95dVdjYw==:q75.awebp?rk3s=f64ab15b&amp;x-expires=1753772431&amp;x-signature=S%2FSsYb5bQUiIQVc%2FMA0VGMJOLqI%3D" alt="test.gif"></p><p>先展示最终代码，之后再详细讲解</p><p><strong>如果你不想看详细解释并对自己的实力有信心，可以不用看下面的详细解释，直接从代码中获取关键信息并在自己的项目中实现路由切换动画。很简单的</strong></p><p><strong>.vitepress/theme/MyLayout.vue</strong></p><h2 id="给显示文档的区域插入一个遮罩层" tabindex="-1">给显示文档的区域插入一个遮罩层 <a class="header-anchor" href="#给显示文档的区域插入一个遮罩层" aria-label="Permalink to &quot;给显示文档的区域插入一个遮罩层&quot;">​</a></h2><h3 id="主题入口文件" tabindex="-1">主题入口文件 <a class="header-anchor" href="#主题入口文件" aria-label="Permalink to &quot;主题入口文件&quot;">​</a></h3><p>首先要明白如何扩展默认主题</p><p>vitepress 中可以通过创建一个 <code>.vitepress/theme/index.js</code> 或 <code>.vitepress/theme/index.ts</code> 文件 (即“主题入口文件”) 来启用自定义主题</p><p>在主题入口文件中，可以直接创建一个新的主题来覆盖掉默认主题，但是最好别这样做（vitepress 的默认主题还是很靠谱的）</p><blockquote><p>如果你确实觉得默认主题就是一坨答辩，可以去看看官方文档中的 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fvitepress.dev%2Fzh%2Freference%2Fsite-config" title="https://vitepress.dev/zh/reference/site-config" target="_blank" rel="noreferrer">配置和 API 参考</a></p></blockquote><p>更多时候，我们希望扩展默认主题，比如添加一个布局插槽，或者修改默认主题的样式</p><p>上面的 <code>.vitepress/theme/index.ts</code> 文件是一个没有任何多余东西的扩展主题，它使用注入插槽的包装组件（<code>MyLayout</code>）覆盖原始的 Layout。如果你的项目中没有其它东西修改过 <code>index.ts</code>（vitepress 的新手），那么可以直接复制</p><hr><h3 id="mylayout-vue-布局文件" tabindex="-1"><code>MyLayout.vue</code> 布局文件 <a class="header-anchor" href="#mylayout-vue-布局文件" aria-label="Permalink to &quot;`MyLayout.vue` 布局文件&quot;">​</a></h3><p>现在关键来到了 <code>.vitepress/theme/MyLayout.vue</code> 文件</p><p>它其实就是一个 Vue 单文件组件，不同的是如果你想要扩展默认主题，那么应该提供 vitepress 暴露的 <code>Layout</code> 组件</p><p>其中的 #doc-top 是一个插槽的位置，关于插槽的更多内容请查看官方文档 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fvitepress.dev%2Fzh%2Fguide%2Fextending-default-theme%23layout-slots" title="https://vitepress.dev/zh/guide/extending-default-theme#layout-slots" target="_blank" rel="noreferrer">布局插槽</a></p><h2 id="丰富遮罩层的样式并添加可以由-js-控制的动画效果" tabindex="-1">丰富遮罩层的样式并添加可以由 JS 控制的动画效果 <a class="header-anchor" href="#丰富遮罩层的样式并添加可以由-js-控制的动画效果" aria-label="Permalink to &quot;丰富遮罩层的样式并添加可以由 JS 控制的动画效果&quot;">​</a></h2><p>如果你熟悉 js、css 和 vue，那么这一步你会很熟悉</p><p>代码看起来增加了很多，其实主要是 CSS 动画，如果你非常熟悉 CSS，那么可以自定义你的动画效果。你甚至可以使用 gsap 等动画库（需要安装依赖）。如果你是新手，直接复制吧，还说啥呢</p><p>别忘了关键的 <code>isTransitioning</code> 响应式变量，它将是下一步的关键</p><h2 id="监听路由切换-控制动画效果" tabindex="-1">监听路由切换，控制动画效果 <a class="header-anchor" href="#监听路由切换-控制动画效果" aria-label="Permalink to &quot;监听路由切换，控制动画效果&quot;">​</a></h2><p>距离完成还有最后一步，如果你熟悉 VueRouter, 那么这一步你会很熟悉</p><p>实际上 VitePress 是基于 VueRouter 实现路由跳转的，但是它对 VueRouter 做了封装</p><p>要控制路由与原版 VueRouter 一样，关键是获取路由实例的方法变成了 vitepress 提供的 <code>useRouter()</code> 函数</p><p>现在在 <code>MyLayout.vue</code> 中获取到路由实例，监听路由的变化，然后在路由变化时控制遮罩层的动画效果</p><p>注意：如果不监听路由变化，那么动画效果将只会生效一次，具体原因是因为 Layout 组件只会被渲染一次</p><h2 id="完成" tabindex="-1">完成 <a class="header-anchor" href="#完成" aria-label="Permalink to &quot;完成&quot;">​</a></h2><p>如果大佬们有更好的方法，可以在评论区留言 萌新们别忘了看看评论区，大佬们总是会在评论区出现</p>',42)),a(s),a(o)])}const f=r(d,[["render",l]]);export{g as __pageData,f as default};
